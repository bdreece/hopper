package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"time"

	"github.com/bdreece/hopper/pkg/models"
)

// Timestamp is the resolver for the timestamp field.
func (r *eventResolver) Timestamp(ctx context.Context, obj *models.Event) (*time.Time, error) {
	time := obj.Timestamp.AsTime()
	return &time, nil
}

// Device is the resolver for the device field.
func (r *eventResolver) Device(ctx context.Context, obj *models.Event) (*models.Device, error) {
	const (
		resolver = "EventResolver"
		field    = "Device"
	)

	logger := r.logger.
		WithContext(resolver).
		WithContext(field)

	logger.Infoln("Querying event device...")
	device := models.Device{}
	err := r.db.
		InnerJoins("event").
		Where("event.id = ?", obj.ID).
		First(&device).
		Error

	if err != nil {
		return nil, handleQueryError(err, logger, field)
	}

	logger.Infoln("Device received!")
	return &device, nil
}

// Property is the resolver for the property field.
func (r *eventResolver) Property(ctx context.Context, obj *models.Event) (*models.Property, error) {
	const (
		resolver = "EventResolver"
		field    = "Device"
	)

	logger := r.logger.
		WithContext(resolver).
		WithContext(field)

	logger.Infoln("Querying event property...")
	property := models.Property{}
	err := r.db.
		InnerJoins("event", obj).
		First(&property).
		Error

	if err != nil {
		return nil, handleQueryError(err, logger, "Property")
	}

	logger.Infoln("Property received!")
	return &property, nil
}

// Event returns EventResolver implementation.
func (r *Resolver) Event() EventResolver { return &eventResolver{r} }

type eventResolver struct{ *Resolver }
