package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/bdreece/hopper/pkg/models"
)

// Tenant is the resolver for the tenant field.
func (r *deviceResolver) Tenant(ctx context.Context, obj *models.Device) (*models.Tenant, error) {
	const (
		resolver = "DeviceResolver"
		field    = "Tenant"
	)

	logger := r.logger.
		WithContext(resolver).
		WithContext(field)

	logger.Infoln("Querying device model tenant...")
	tenant := models.Tenant{}
	err := r.db.
		InnerJoins("device", obj).
		First(&tenant).
		Error

	if err != nil {
		return nil, handleQueryError(err, logger, field)
	}

	logger.Infoln("Tenant received!")
	return &tenant, nil
}

// Firmware is the resolver for the firmware field.
func (r *deviceResolver) Firmware(ctx context.Context, obj *models.Device) (*models.Firmware, error) {
	const (
		resolver = "DeviceResolver"
		field    = "Firmware"
	)

	logger := r.logger.
		WithContext(resolver).
		WithContext(field)

	logger.Infoln("Querying device firmware...")
	firmware := models.Firmware{}
	err := r.db.
		InnerJoins("device").
		Where("device.id = ?", obj.ID).
		First(&firmware).
		Error

	if err != nil {
		return nil, handleQueryError(err, logger, "Firmware")
	}

	logger.Infoln("Firmware received!")
	return &firmware, nil
}

// Model is the resolver for the model field.
func (r *deviceResolver) Model(ctx context.Context, obj *models.Device) (*models.DeviceModel, error) {
	const (
		resolver = "DeviceResolver"
		field    = "Model"
	)

	logger := r.logger.
		WithContext(resolver).
		WithContext(field)

	logger.Infoln("Querying device model...")
	model := models.DeviceModel{}
	err := r.db.
		Where("device.id = ?", obj.ID).
		First(&model).
		Error

	if err != nil {
		return nil, handleQueryError(err, logger, "Model")
	}

	logger.Infoln("Device model received!")
	return &model, nil
}

// Device returns DeviceResolver implementation.
func (r *Resolver) Device() DeviceResolver { return &deviceResolver{r} }

type deviceResolver struct{ *Resolver }
