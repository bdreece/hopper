package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/bdreece/hopper/pkg/models"
)

// Tenant is the resolver for the tenant field.
func (r *deviceModelResolver) Tenant(ctx context.Context, obj *models.DeviceModel) (*models.Tenant, error) {
	const (
		resolver = "DeviceModelResolver"
		field    = "Tenant"
	)

	logger := r.logger.
		WithContext(resolver).
		WithContext(field)

	logger.Infoln("Querying device model tenant...")
	tenant := models.Tenant{}
	err := r.db.
		InnerJoins("deviceModel", obj).
		First(&tenant).
		Error

	if err != nil {
		return nil, handleQueryError(err, logger, field)
	}

	logger.Infoln("Tenant received!")
	return &tenant, nil
}

// DeviceModel returns DeviceModelResolver implementation.
func (r *Resolver) DeviceModel() DeviceModelResolver { return &deviceModelResolver{r} }

type deviceModelResolver struct{ *Resolver }
