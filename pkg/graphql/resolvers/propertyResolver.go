package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/bdreece/hopper/pkg/models"
)

// Type is the resolver for the type field.
func (r *propertyResolver) Type(ctx context.Context, obj *models.Property) (*models.Type, error) {
	const (
		resolver = "PropertyResolver"
		field    = "Type"
	)

	logger := r.logger.
		WithContext(resolver).
		WithContext(field)

	logger.Infoln("Querying for property type")
	typeModel := models.Type{}
	err := r.db.
		InnerJoins("property", obj).
		First(&typeModel).
		Error

	if err != nil {
		return nil, handleQueryError(err, logger, "Type")
	}

	return &typeModel, nil
}

// Model is the resolver for the model field.
func (r *propertyResolver) Model(ctx context.Context, obj *models.Property) (*models.DeviceModel, error) {
	const (
		resolver = "PropertyResolver"
		field    = "DeviceModel"
	)

	logger := r.logger.
		WithContext(resolver).
		WithContext(field)

	logger.Infoln("Querying for property device model...")
	deviceModel := models.DeviceModel{}
	err := r.db.
		InnerJoins("property = ?", obj).
		First(&deviceModel).
		Error

	if err != nil {
		return nil, handleQueryError(err, logger, field)
	}

	logger.Infoln("Device model received!")
	return &deviceModel, nil
}

// Device is the resolver for the device field.
func (r *propertyResolver) Device(ctx context.Context, obj *models.Property) (*models.Device, error) {
	const (
		resolver = "PropertyResolver"
		field    = "Device"
	)

	logger := r.logger.
		WithContext(resolver).
		WithContext(field)

	logger.Infoln("Querying for property device...")
	device := models.Device{}
	err := r.db.
		InnerJoins("property", obj).
		First(&device).
		Error

	if err != nil {
		return nil, handleQueryError(err, logger, field)
	}

	logger.Infoln("Device received!")
	return &device, nil
}

// Property returns PropertyResolver implementation.
func (r *Resolver) Property() PropertyResolver { return &propertyResolver{r} }

type propertyResolver struct{ *Resolver }
